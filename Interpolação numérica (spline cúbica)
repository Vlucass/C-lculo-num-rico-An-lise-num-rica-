echo "# C-lculo-num-rico-An-lise-num-rica-" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Vlucass/C-lculo-num-rico-An-lise-num-rica-.git
git push -u origin main

#Atividade prática
"""

#1) Gerar pontos x e f(x)
#2) Obter Matrizes A e B, coeficientes a, b, c e d
#3) Obter o Spline pros pontos gerados
#4) plot do gráfico

import numpy as np
from matplotlib import pyplot as plt

def subs_retro(A, B): #solução retroativa (matriz triangular superior)
  n = len(A) #ordem do vetor A
  x = n * [0.0] #vetor solução
  for i in range(n-1, -1, -1): #percorre do n-ésimo índice ao primeiro
    Somatoria = 0
    for j in range(i+1, n):
      Somatoria += A[i][j] * x[j]
    x[i] = (B[i] - Somatoria)/A[i][i] #i-ésimas soluções
    B[i] = round(B[i], 2) #arredonda os elementos do vetor B
    A[i][i] = round(A[i][i], 2) #inclui round para os elementos da diagonal de A
    x[i] = round(x[i], 2) #arredonda, limita as casas decimais da solução
  return x

def e_gaussianaTS(A, B): #a matriz se torna triangular superior
  n = len(A)
  for k in range(0, n-1): #para cada etapa k
    for i in range(k+1, n): #para cada linha i
      m = - A[i][k]/A[k][k] #fator m
      for j in range(k+1, n): #percorre as colunas j para atualizar todas as li-
      #nhas i
        A[i][j] += m*A[k][j] #altera a matriz A
      B[i] += m*B[k] #altera o vetor B
      A[i][k] = 0.0 
  x = subs_retro(A, B) #soluções retroativas
  return x

def construirMA(h, n): #contruindo a matriz A
  A = np.zeros((n, n))
  A[0][0] = 1
  A[n-1][n-1] = 1
  for i in range(0, n-1):
    A[i][i] = 2*(h[i-1] + h[i])
    for j in range(0, n-1):
      if i == j+1:
        A[i][j] = h[i-1]
      elif j == i+1:
        A[i][j] = h[j]
  return A

def construirMB(h, y, n): #construindo a matriz B
  B = np.zeros(n)
  for i in range(1, n-1):
    B[i] = 3*(y[i+1] - y[i])/h[i] - 3*(y[i] - y[i-1])/h[i-1]
  return B

def fx(x): #1) função f(x)
  y = 1/(1 + 25*x**2)
  return y

def construirSpline(a, x, xint, n): #construindo o spline
  h = []
  for j in range(0, n-1): #Contruindo o vetor de h's
    h.append(x[j+1] - x[j])
  #print(h)

  A = construirMA(h, n) #2) Matriz A
  #print(A)

  B = construirMB(h, a, n) #2) Vetor B
  #print(B)

  c = e_gaussianaTS(A, B) #2) Coeficientes c's
  #print(c)

  b = [] #2) Coeficientes b's
  d = [] #2) Coeficientes d's
  for i in range(0, n-1):
    b.append((a[i+1] - a[i])/h[i] - (h[i]*(2*c[i] + c[i+1]))/3)
    d.append((c[i+1]-c[i])*(1/(3*h[i])))
  #print(d)
  #print(b)
  yspline = []
  for p in xint:
    for i in range(0, n-1):
      if x[i] <= p and p < x[i+1]:
        splinecub = a[i] + b[i]*(p - x[i]) + c[i]*((p - x[i])**2) + d[i]*((p - x[i])**3)
        yspline.append(splinecub)
        #print(spline)
  return yspline

xx = np.linspace(-1, 1, 15) #1) valores de x
#print(xx)

xint = np.arange(-1, 1, 0.001) #valores espaçados de x pro intervalo
#print(xint)

y = fx(xx) #2) valores de f(x) lembrando que a[i] = f(i), logo y[] = coef(aij)
#print(y)

n = len(xx) #ordem da matriz A
#print(n)

yspline = construirSpline(y, xx, xint,  n) #3) Spline para os pontos gerados
#print(spline)
#print(len(spline))

plt.grid()
plt.plot(xx, y, "ko") #1) & 4) Pontos gerados
plt.plot(xx, y, color="orange") #splinelinear
plt.plot(xint, yspline , color="black") #4) Curva interpoladora
